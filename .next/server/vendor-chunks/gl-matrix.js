"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gl-matrix";
exports.ids = ["vendor-chunks/gl-matrix"];
exports.modules = {

/***/ "(ssr)/./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_TYPE: () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   EPSILON: () => (/* binding */ EPSILON),\n/* harmony export */   RANDOM: () => (/* binding */ RANDOM),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   setMatrixArrayType: () => (/* binding */ setMatrixArrayType),\n/* harmony export */   toRadian: () => (/* binding */ toRadian)\n/* harmony export */ });\n/**\n * Common utilities\n * @module glMatrix\n */ // Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== \"undefined\" ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */ function setMatrixArrayType(type) {\n    ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */ function toRadian(a) {\n    return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */ function equals(a, b) {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function() {\n    var y = 0, i = arguments.length;\n    while(i--){\n        y += arguments[i] * arguments[i];\n    }\n    return Math.sqrt(y);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ0QsMEJBQTBCO0FBQ25CLElBQUlBLFVBQVUsU0FBUztBQUN2QixJQUFJQyxhQUFhLE9BQU9DLGlCQUFpQixjQUFjQSxlQUFlQyxNQUFNO0FBQzVFLElBQUlDLFNBQVNDLEtBQUtDLE1BQU0sQ0FBQztBQUNoQzs7OztDQUlDLEdBRU0sU0FBU0MsbUJBQW1CQyxJQUFJO0lBQ3JDUCxhQUFhTztBQUNmO0FBQ0EsSUFBSUMsU0FBU0osS0FBS0ssRUFBRSxHQUFHO0FBQ3ZCOzs7O0NBSUMsR0FFTSxTQUFTQyxTQUFTQyxDQUFDO0lBQ3hCLE9BQU9BLElBQUlIO0FBQ2I7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUVNLFNBQVNJLE9BQU9ELENBQUMsRUFBRUUsQ0FBQztJQUN6QixPQUFPVCxLQUFLVSxHQUFHLENBQUNILElBQUlFLE1BQU1kLFVBQVVLLEtBQUtXLEdBQUcsQ0FBQyxLQUFLWCxLQUFLVSxHQUFHLENBQUNILElBQUlQLEtBQUtVLEdBQUcsQ0FBQ0Q7QUFDMUU7QUFDQSxJQUFJLENBQUNULEtBQUtZLEtBQUssRUFBRVosS0FBS1ksS0FBSyxHQUFHO0lBQzVCLElBQUlDLElBQUksR0FDSkMsSUFBSUMsVUFBVUMsTUFBTTtJQUV4QixNQUFPRixJQUFLO1FBQ1ZELEtBQUtFLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHQyxTQUFTLENBQUNELEVBQUU7SUFDbEM7SUFFQSxPQUFPZCxLQUFLaUIsSUFBSSxDQUFDSjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NrZWxldG9uLXVpLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vY29tbW9uLmpzPzVkM2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gdXRpbGl0aWVzXG4gKiBAbW9kdWxlIGdsTWF0cml4XG4gKi9cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuLyoqXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcbiAqXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheUNvbnN0cnVjdG9yIHwgQXJyYXlDb25zdHJ1Y3Rvcn0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICBBUlJBWV9UWVBFID0gdHlwZTtcbn1cbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xuLyoqXG4gKiBDb252ZXJ0IERlZ3JlZSBUbyBSYWRpYW5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmFkaWFuKGEpIHtcbiAgcmV0dXJuIGEgKiBkZWdyZWU7XG59XG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcbiAqIHRoYW4gb3IgZXF1YWwgdG8gMS4wLCBhbmQgYSByZWxhdGl2ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgbGFyZ2VyIHZhbHVlcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXG4gKiBAcGFyYW0ge051bWJlcn0gYiBUaGUgc2Vjb25kIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuaWYgKCFNYXRoLmh5cG90KSBNYXRoLmh5cG90ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IDAsXG4gICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgeSArPSBhcmd1bWVudHNbaV0gKiBhcmd1bWVudHNbaV07XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KHkpO1xufTsiXSwibmFtZXMiOlsiRVBTSUxPTiIsIkFSUkFZX1RZUEUiLCJGbG9hdDMyQXJyYXkiLCJBcnJheSIsIlJBTkRPTSIsIk1hdGgiLCJyYW5kb20iLCJzZXRNYXRyaXhBcnJheVR5cGUiLCJ0eXBlIiwiZGVncmVlIiwiUEkiLCJ0b1JhZGlhbiIsImEiLCJlcXVhbHMiLCJiIiwiYWJzIiwibWF4IiwiaHlwb3QiLCJ5IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNxcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gl-matrix/esm/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   adjoint: () => (/* binding */ adjoint),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   frob: () => (/* binding */ frob),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   fromQuat2: () => (/* binding */ fromQuat2),\n/* harmony export */   fromRotation: () => (/* binding */ fromRotation),\n/* harmony export */   fromRotationTranslation: () => (/* binding */ fromRotationTranslation),\n/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   fromRotationTranslationScaleOrigin: () => (/* binding */ fromRotationTranslationScaleOrigin),\n/* harmony export */   fromScaling: () => (/* binding */ fromScaling),\n/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   fromXRotation: () => (/* binding */ fromXRotation),\n/* harmony export */   fromYRotation: () => (/* binding */ fromYRotation),\n/* harmony export */   fromZRotation: () => (/* binding */ fromZRotation),\n/* harmony export */   frustum: () => (/* binding */ frustum),\n/* harmony export */   getRotation: () => (/* binding */ getRotation),\n/* harmony export */   getScaling: () => (/* binding */ getScaling),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   lookAt: () => (/* binding */ lookAt),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   ortho: () => (/* binding */ ortho),\n/* harmony export */   orthoNO: () => (/* binding */ orthoNO),\n/* harmony export */   orthoZO: () => (/* binding */ orthoZO),\n/* harmony export */   perspective: () => (/* binding */ perspective),\n/* harmony export */   perspectiveFromFieldOfView: () => (/* binding */ perspectiveFromFieldOfView),\n/* harmony export */   perspectiveNO: () => (/* binding */ perspectiveNO),\n/* harmony export */   perspectiveZO: () => (/* binding */ perspectiveZO),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   targetTo: () => (/* binding */ targetTo),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */ /**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n        out[4] = 0;\n        out[6] = 0;\n        out[7] = 0;\n        out[8] = 0;\n        out[9] = 0;\n        out[11] = 0;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n    }\n    out[0] = 1;\n    out[5] = 1;\n    out[10] = 1;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */ function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */ function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */ function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3];\n        var a12 = a[6], a13 = a[7];\n        var a23 = a[11];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function invert(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */ function adjoint(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n    return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */ function determinant(a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function multiply(out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */ function translate(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n    var a00, a01, a02, a03;\n    var a10, a11, a12, a13;\n    var a20, a21, a22, a23;\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/ function scale(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2];\n    var len = Math.hypot(x, y, z);\n    var s, c, t;\n    var a00, a01, a02, a03;\n    var a10, a11, a12, a13;\n    var a20, a21, a22, a23;\n    var b00, b01, b02;\n    var b10, b11, b12;\n    var b20, b21, b22;\n    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11]; // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateX(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged rows\n        out[0] = a[0];\n        out[1] = a[1];\n        out[2] = a[2];\n        out[3] = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateY(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged rows\n        out[4] = a[4];\n        out[5] = a[5];\n        out[6] = a[6];\n        out[7] = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function rotateZ(out, a, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[8] = a[8];\n        out[9] = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    } // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */ function fromTranslation(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */ function fromScaling(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */ function fromRotation(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2];\n    var len = Math.hypot(x, y, z);\n    var s, c, t;\n    if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c; // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromXRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromYRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = 0;\n    out[2] = -s;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */ function fromZRotation(out, rad) {\n    var s = Math.sin(rad);\n    var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */ function fromRotationTranslation(out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */ function fromQuat2(out, a) {\n    var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];\n    var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n    if (magnitude > 0) {\n        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n    } else {\n        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n    }\n    fromRotationTranslation(out, a, translation);\n    return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n    return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */ function getScaling(out, mat) {\n    var m11 = mat[0];\n    var m12 = mat[1];\n    var m13 = mat[2];\n    var m21 = mat[4];\n    var m22 = mat[5];\n    var m23 = mat[6];\n    var m31 = mat[8];\n    var m32 = mat[9];\n    var m33 = mat[10];\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n    return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */ function getRotation(out, mat) {\n    var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    getScaling(scaling, mat);\n    var is1 = 1 / scaling[0];\n    var is2 = 1 / scaling[1];\n    var is3 = 1 / scaling[2];\n    var sm11 = mat[0] * is1;\n    var sm12 = mat[1] * is2;\n    var sm13 = mat[2] * is3;\n    var sm21 = mat[4] * is1;\n    var sm22 = mat[5] * is2;\n    var sm23 = mat[6] * is3;\n    var sm31 = mat[8] * is1;\n    var sm32 = mat[9] * is2;\n    var sm33 = mat[10] * is3;\n    var trace = sm11 + sm22 + sm33;\n    var S = 0;\n    if (trace > 0) {\n        S = Math.sqrt(trace + 1.0) * 2;\n        out[3] = 0.25 * S;\n        out[0] = (sm23 - sm32) / S;\n        out[1] = (sm31 - sm13) / S;\n        out[2] = (sm12 - sm21) / S;\n    } else if (sm11 > sm22 && sm11 > sm33) {\n        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n        out[3] = (sm23 - sm32) / S;\n        out[0] = 0.25 * S;\n        out[1] = (sm12 + sm21) / S;\n        out[2] = (sm31 + sm13) / S;\n    } else if (sm22 > sm33) {\n        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n        out[3] = (sm31 - sm13) / S;\n        out[0] = (sm12 + sm21) / S;\n        out[1] = 0.25 * S;\n        out[2] = (sm23 + sm32) / S;\n    } else {\n        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n        out[3] = (sm12 - sm21) / S;\n        out[0] = (sm31 + sm13) / S;\n        out[1] = (sm23 + sm32) / S;\n        out[2] = 0.25 * S;\n    }\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */ function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var sx = s[0];\n    var sy = s[1];\n    var sz = s[2];\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */ function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var sx = s[0];\n    var sy = s[1];\n    var sz = s[2];\n    var ox = o[0];\n    var oy = o[1];\n    var oz = o[2];\n    var out0 = (1 - (yy + zz)) * sx;\n    var out1 = (xy + wz) * sx;\n    var out2 = (xz - wy) * sx;\n    var out4 = (xy - wz) * sy;\n    var out5 = (1 - (xx + zz)) * sy;\n    var out6 = (yz + wx) * sy;\n    var out8 = (xz + wy) * sz;\n    var out9 = (yz - wx) * sz;\n    var out10 = (1 - (xx + yy)) * sz;\n    out[0] = out0;\n    out[1] = out1;\n    out[2] = out2;\n    out[3] = 0;\n    out[4] = out4;\n    out[5] = out5;\n    out[6] = out6;\n    out[7] = 0;\n    out[8] = out8;\n    out[9] = out9;\n    out[10] = out10;\n    out[11] = 0;\n    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n    out[15] = 1;\n    return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */ function fromQuat(out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3];\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var yx = y * x2;\n    var yy = y * y2;\n    var zx = z * x2;\n    var zy = z * y2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */ function frustum(out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left);\n    var tb = 1 / (top - bottom);\n    var nf = 1 / (near - far);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = far * near * 2 * nf;\n    out[15] = 0;\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */ function perspectiveNO(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2), nf;\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n        nf = 1 / (near - far);\n        out[10] = (far + near) * nf;\n        out[14] = 2 * far * near * nf;\n    } else {\n        out[10] = -1;\n        out[14] = -2 * near;\n    }\n    return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */ var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */ function perspectiveZO(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2), nf;\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[15] = 0;\n    if (far != null && far !== Infinity) {\n        nf = 1 / (near - far);\n        out[10] = far * nf;\n        out[14] = far * near * nf;\n    } else {\n        out[10] = -1;\n        out[14] = -near;\n    }\n    return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function perspectiveFromFieldOfView(out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    var xScale = 2.0 / (leftTan + rightTan);\n    var yScale = 2.0 / (upTan + downTan);\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = (upTan - downTan) * yScale * 0.5;\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = far * near / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function orthoNO(out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right);\n    var bt = 1 / (bottom - top);\n    var nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */ var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */ function orthoZO(out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right);\n    var bt = 1 / (bottom - top);\n    var nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = near * nf;\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */ function lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n    var eyex = eye[0];\n    var eyey = eye[1];\n    var eyez = eye[2];\n    var upx = up[0];\n    var upy = up[1];\n    var upz = up[2];\n    var centerx = center[0];\n    var centery = center[1];\n    var centerz = center[2];\n    if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n        return identity(out);\n    }\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n    len = 1 / Math.hypot(z0, z1, z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.hypot(x0, x1, x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.hypot(y0, y1, y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n    return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */ function targetTo(out, eye, target, up) {\n    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];\n    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];\n    var len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */ function str(a) {\n    return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */ function frob(a) {\n    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */ function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */ function multiplyScalarAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    out[4] = a[4] + b[4] * scale;\n    out[5] = a[5] + b[5] * scale;\n    out[6] = a[6] + b[6] * scale;\n    out[7] = a[7] + b[7] * scale;\n    out[8] = a[8] + b[8] * scale;\n    out[9] = a[9] + b[9] * scale;\n    out[10] = a[10] + b[10] * scale;\n    out[11] = a[11] + b[11] * scale;\n    out[12] = a[12] + b[12] * scale;\n    out[13] = a[13] + b[13] * scale;\n    out[14] = a[14] + b[14] * scale;\n    out[15] = a[15] + b[15] * scale;\n    return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];\n    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];\n    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];\n    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];\n    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */ var sub = subtract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDeEM7OztDQUdDLEdBRUQ7Ozs7Q0FJQyxHQUVNLFNBQVNDO0lBQ2QsSUFBSUMsTUFBTSxJQUFJRixrREFBbUIsQ0FBQztJQUVsQyxJQUFJQSxrREFBbUIsSUFBSUksY0FBYztRQUN2Q0YsR0FBRyxDQUFDLEVBQUUsR0FBRztRQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ1RBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7UUFDVEEsR0FBRyxDQUFDLEVBQUUsR0FBRztRQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ1RBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7UUFDVEEsR0FBRyxDQUFDLEVBQUUsR0FBRztRQUNUQSxHQUFHLENBQUMsRUFBRSxHQUFHO1FBQ1RBLEdBQUcsQ0FBQyxHQUFHLEdBQUc7UUFDVkEsR0FBRyxDQUFDLEdBQUcsR0FBRztRQUNWQSxHQUFHLENBQUMsR0FBRyxHQUFHO1FBQ1ZBLEdBQUcsQ0FBQyxHQUFHLEdBQUc7SUFDWjtJQUVBQSxHQUFHLENBQUMsRUFBRSxHQUFHO0lBQ1RBLEdBQUcsQ0FBQyxFQUFFLEdBQUc7SUFDVEEsR0FBRyxDQUFDLEdBQUcsR0FBRztJQUNWQSxHQUFHLENBQUMsR0FBRyxHQUFHO0lBQ1YsT0FBT0E7QUFDVDtBQUNBOzs7OztDQUtDLEdBRU0sU0FBU0csTUFBTUMsQ0FBQztJQUNyQixJQUFJSixNQUFNLElBQUlGLGtEQUFtQixDQUFDO0lBQ2xDRSxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRTtJQUNiSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmSixHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRztJQUNmLE9BQU9KO0FBQ1Q7QUFDQTs7Ozs7O0NBTUMsR0FFTSxTQUFTSyxLQUFLTCxHQUFHLEVBQUVJLENBQUM7SUFDekJKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFO0lBQ2JKLEdBQUcsQ0FBQyxFQUFF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QUMsRUFBRSxFQUNSRyxJQUFJSCxDQUFDLENBQUMsRUFBRTtJQUNaakUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRzhEO0lBQ2hCbEUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRzhEO0lBQ2hCbEUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRzhEO0lBQ2hCbEUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRzhEO0lBQ2hCbEUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRytEO0lBQ2hCbkUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRytEO0lBQ2hCbkUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRytEO0lBQ2hCbkUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBRytEO0lBQ2hCbkUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBR2dFO0lBQ2hCcEUsR0FBRyxDQUFDLEVBQUUsR0FBR0ksQ0FBQyxDQUFDLEVBQUUsR0FBR2dFO0lBQ2hCcEUsR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUcsR0FBR2dFO0lBQ2xCcEUsR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUcsR0FBR2dFO0lBQ2xCcEUsR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUc7SUFDZkosR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUc7SUFDZkosR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUc7SUFDZkosR0FBRyxDQUFDLEdBQUcsR0FBR0ksQ0FBQyxDQUFDLEdBQUc7SUFDZixPQUFPSjtBQUNUO0FBQ0E7Ozs7Ozs7O0NBUUMsR0FFTSxTQUFTc0UsT0FBT3RFLEdBQUcsRUFBRUksQ0FBQyxFQUFFbUUsR0FBRyxFQUFF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RSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIsT0FBTzNEO0FBQ1Q7QUFDQTs7Ozs7OztDQU9DLEdBRU0sU0FBU2dPLFNBQVNoTyxHQUFHLEVBQUVJLENBQUMsRUFBRXVELENBQUM7SUFDaEMzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQsQ0FBQyxDQUFDLEVBQUU7SUFDcEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQsQ0FBQyxDQUFDLEdBQUc7SUFDdkIsT0FBTzNEO0FBQ1Q7QUFDQTs7Ozs7OztDQU9DLEdBRU0sU0FBU2lPLGVBQWVqTyxHQUFHLEVBQUVJLENBQUMsRUFBRXVELENBQUM7SUFDdEMzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsRUFBRSxHQUFHSSxDQUFDLENBQUMsRUFBRSxHQUFHdUQ7SUFDaEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIzRCxHQUFHLENBQUMsR0FBRyxHQUFHSSxDQUFDLENBQUMsR0FBRyxHQUFHdUQ7SUFDbEIsT0FBTzNEO0FBQ1Q7QUFDQTs7Ozs7Ozs7Q0FRQyxHQUVNLFNBQVNrTyxxQkFBcUJsTyxHQUFHLEVBQUVJLENBQUMsRUFBRXVELENBQUMsRUFBRVUsS0FBSztJQUNuRHJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxFQUFFLEdBQUdJLENBQUMsQ0FBQyxFQUFFLEdBQUd1RCxDQUFDLENBQUMsRUFBRSxHQUFHVTtJQUN2QnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQnJFLEdBQUcsQ0FBQyxHQUFHLEdBQUdJLENBQUMsQ0FBQyxHQUFHLEdBQUd1RCxDQUFDLENBQUMsR0FBRyxHQUFHVTtJQUMxQixPQUFPckU7QUFDVDtBQUNBOzs7Ozs7Q0FNQyxHQUVNLFNBQVNtTyxZQUFZL04sQ0FBQyxFQUFFdUQsQ0FBQztJQUM5QixPQUFPdkQsQ0FBQyxDQUFDLEVBQUUsS0FBS3VELENBQUMsQ0FBQyxFQUFFLElBQUl2RCxDQUFDLENBQUMsRUFBRSxLQUFLdUQsQ0FBQyxDQUFDLEVBQUUsSUFBSXZELENBQUMsQ0FBQyxFQUFFLEtBQUt1RCxDQUFDLENBQUMsRUFBRSxJQUFJdkQsQ0FBQyxDQUFDLEVBQUUsS0FBS3VELENBQUMsQ0FBQyxFQUFF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dG9uLXVpLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0NC5qcz9lZTQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiA0eDQgTWF0cml4PGJyPkZvcm1hdDogY29sdW1uLW1ham9yLCB3aGVuIHR5cGVkIG91dCBpdCBsb29rcyBsaWtlIHJvdy1tYWpvcjxicj5UaGUgbWF0cmljZXMgYXJlIGJlaW5nIHBvc3QgbXVsdGlwbGllZC5cbiAqIEBtb2R1bGUgbWF0NFxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQ0XG4gKlxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgfVxuXG4gIG91dFswXSA9IDE7XG4gIG91dFs1XSA9IDE7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0NH0gYSBuZXcgNHg0IG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQ0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgb3V0WzldID0gYVs5XTtcbiAgb3V0WzEwXSA9IGFbMTBdO1xuICBvdXRbMTFdID0gYVsxMV07XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1hdDQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxuICogQHJldHVybnMge21hdDR9IEEgbmV3IG1hdDRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTAzO1xuICBvdXRbNF0gPSBtMTA7XG4gIG91dFs1XSA9IG0xMTtcbiAgb3V0WzZdID0gbTEyO1xuICBvdXRbN10gPSBtMTM7XG4gIG91dFs4XSA9IG0yMDtcbiAgb3V0WzldID0gbTIxO1xuICBvdXRbMTBdID0gbTIyO1xuICBvdXRbMTFdID0gbTIzO1xuICBvdXRbMTJdID0gbTMwO1xuICBvdXRbMTNdID0gbTMxO1xuICBvdXRbMTRdID0gbTMyO1xuICBvdXRbMTVdID0gbTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTAzO1xuICBvdXRbNF0gPSBtMTA7XG4gIG91dFs1XSA9IG0xMTtcbiAgb3V0WzZdID0gbTEyO1xuICBvdXRbN10gPSBtMTM7XG4gIG91dFs4XSA9IG0yMDtcbiAgb3V0WzldID0gbTIxO1xuICBvdXRbMTBdID0gbTIyO1xuICBvdXRbMTFdID0gbTIzO1xuICBvdXRbMTJdID0gbTMwO1xuICBvdXRbMTNdID0gbTMxO1xuICBvdXRbMTRdID0gbTMyO1xuICBvdXRbMTVdID0gbTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgYSBtYXQ0IHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMTtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDE7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICBpZiAob3V0ID09PSBhKSB7XG4gICAgdmFyIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgdmFyIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgdmFyIGEyMyA9IGFbMTFdO1xuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhMDE7XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhMDI7XG4gICAgb3V0WzldID0gYTEyO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYTAzO1xuICAgIG91dFsxM10gPSBhMTM7XG4gICAgb3V0WzE0XSA9IGEyMztcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhWzFdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhWzJdO1xuICAgIG91dFs5XSA9IGFbNl07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYVszXTtcbiAgICBvdXRbMTNdID0gYVs3XTtcbiAgICBvdXRbMTRdID0gYVsxMV07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0O1xuICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xuICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDtcbiAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xuICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgb3V0WzBdID0gYTExICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSArIGEzMSAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpO1xuICBvdXRbMV0gPSAtKGEwMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSk7XG4gIG91dFsyXSA9IGEwMSAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpIC0gYTExICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTEzIC0gYTAzICogYTEyKTtcbiAgb3V0WzNdID0gLShhMDEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbNF0gPSAtKGExMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSk7XG4gIG91dFs1XSA9IGEwMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKTtcbiAgb3V0WzZdID0gLShhMDAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbN10gPSBhMDAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFs4XSA9IGExMCAqIChhMjEgKiBhMzMgLSBhMjMgKiBhMzEpIC0gYTIwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgKyBhMzAgKiAoYTExICogYTIzIC0gYTEzICogYTIxKTtcbiAgb3V0WzldID0gLShhMDAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkpO1xuICBvdXRbMTBdID0gYTAwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpO1xuICBvdXRbMTFdID0gLShhMDAgKiAoYTExICogYTIzIC0gYTEzICogYTIxKSAtIGExMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpICsgYTIwICogKGEwMSAqIGExMyAtIGEwMyAqIGExMSkpO1xuICBvdXRbMTJdID0gLShhMTAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkpO1xuICBvdXRbMTNdID0gYTAwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpO1xuICBvdXRbMTRdID0gLShhMDAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSAtIGExMCAqIChhMDEgKiBhMzIgLSBhMDIgKiBhMzEpICsgYTMwICogKGEwMSAqIGExMiAtIGEwMiAqIGExMSkpO1xuICBvdXRbMTVdID0gYTAwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdO1xuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICB2YXIgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICB2YXIgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICB2YXIgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICB2YXIgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICB2YXIgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICB2YXIgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICB2YXIgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG5cbiAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0NHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07IC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuXG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIG91dFswXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzJdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFszXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICBiMCA9IGJbNF07XG4gIGIxID0gYls1XTtcbiAgYjIgPSBiWzZdO1xuICBiMyA9IGJbN107XG4gIG91dFs0XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFs3XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICBiMCA9IGJbOF07XG4gIGIxID0gYls5XTtcbiAgYjIgPSBiWzEwXTtcbiAgYjMgPSBiWzExXTtcbiAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTBdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzEyXTtcbiAgYjEgPSBiWzEzXTtcbiAgYjIgPSBiWzE0XTtcbiAgYjMgPSBiWzE1XTtcbiAgb3V0WzEyXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsxNF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgb3V0WzE1XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXSxcbiAgICAgIHogPSB2WzJdO1xuICB2YXIgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICB2YXIgYTEwLCBhMTEsIGExMiwgYTEzO1xuICB2YXIgYTIwLCBhMjEsIGEyMiwgYTIzO1xuXG4gIGlmIChhID09PSBvdXQpIHtcbiAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzJdICogeCArIGFbNl0gKiB5ICsgYVsxMF0gKiB6ICsgYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcbiAgfSBlbHNlIHtcbiAgICBhMDAgPSBhWzBdO1xuICAgIGEwMSA9IGFbMV07XG4gICAgYTAyID0gYVsyXTtcbiAgICBhMDMgPSBhWzNdO1xuICAgIGExMCA9IGFbNF07XG4gICAgYTExID0gYVs1XTtcbiAgICBhMTIgPSBhWzZdO1xuICAgIGExMyA9IGFbN107XG4gICAgYTIwID0gYVs4XTtcbiAgICBhMjEgPSBhWzldO1xuICAgIGEyMiA9IGFbMTBdO1xuICAgIGEyMyA9IGFbMTFdO1xuICAgIG91dFswXSA9IGEwMDtcbiAgICBvdXRbMV0gPSBhMDE7XG4gICAgb3V0WzJdID0gYTAyO1xuICAgIG91dFszXSA9IGEwMztcbiAgICBvdXRbNF0gPSBhMTA7XG4gICAgb3V0WzVdID0gYTExO1xuICAgIG91dFs2XSA9IGExMjtcbiAgICBvdXRbN10gPSBhMTM7XG4gICAgb3V0WzhdID0gYTIwO1xuICAgIG91dFs5XSA9IGEyMTtcbiAgICBvdXRbMTBdID0gYTIyO1xuICAgIG91dFsxMV0gPSBhMjM7XG4gICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYTAyICogeCArIGExMiAqIHkgKyBhMjIgKiB6ICsgYVsxNF07XG4gICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIG5vdCB1c2luZyB2ZWN0b3JpemF0aW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IHRoZSB2ZWMzIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXSxcbiAgICAgIHogPSB2WzJdO1xuICBvdXRbMF0gPSBhWzBdICogeDtcbiAgb3V0WzFdID0gYVsxXSAqIHg7XG4gIG91dFsyXSA9IGFbMl0gKiB4O1xuICBvdXRbM10gPSBhWzNdICogeDtcbiAgb3V0WzRdID0gYVs0XSAqIHk7XG4gIG91dFs1XSA9IGFbNV0gKiB5O1xuICBvdXRbNl0gPSBhWzZdICogeTtcbiAgb3V0WzddID0gYVs3XSAqIHk7XG4gIG91dFs4XSA9IGFbOF0gKiB6O1xuICBvdXRbOV0gPSBhWzldICogejtcbiAgb3V0WzEwXSA9IGFbMTBdICogejtcbiAgb3V0WzExXSA9IGFbMTFdICogejtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQsIGF4aXMpIHtcbiAgdmFyIHggPSBheGlzWzBdLFxuICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICB6ID0gYXhpc1syXTtcbiAgdmFyIGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XG4gIHZhciBzLCBjLCB0O1xuICB2YXIgYTAwLCBhMDEsIGEwMiwgYTAzO1xuICB2YXIgYTEwLCBhMTEsIGExMiwgYTEzO1xuICB2YXIgYTIwLCBhMjEsIGEyMiwgYTIzO1xuICB2YXIgYjAwLCBiMDEsIGIwMjtcbiAgdmFyIGIxMCwgYjExLCBiMTI7XG4gIHZhciBiMjAsIGIyMSwgYjIyO1xuXG4gIGlmIChsZW4gPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZW4gPSAxIC8gbGVuO1xuICB4ICo9IGxlbjtcbiAgeSAqPSBsZW47XG4gIHogKj0gbGVuO1xuICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgYyA9IE1hdGguY29zKHJhZCk7XG4gIHQgPSAxIC0gYztcbiAgYTAwID0gYVswXTtcbiAgYTAxID0gYVsxXTtcbiAgYTAyID0gYVsyXTtcbiAgYTAzID0gYVszXTtcbiAgYTEwID0gYVs0XTtcbiAgYTExID0gYVs1XTtcbiAgYTEyID0gYVs2XTtcbiAgYTEzID0gYVs3XTtcbiAgYTIwID0gYVs4XTtcbiAgYTIxID0gYVs5XTtcbiAgYTIyID0gYVsxMF07XG4gIGEyMyA9IGFbMTFdOyAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcblxuICBiMDAgPSB4ICogeCAqIHQgKyBjO1xuICBiMDEgPSB5ICogeCAqIHQgKyB6ICogcztcbiAgYjAyID0geiAqIHggKiB0IC0geSAqIHM7XG4gIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO1xuICBiMTEgPSB5ICogeSAqIHQgKyBjO1xuICBiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcbiAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7XG4gIGIyMSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICBiMjIgPSB6ICogeiAqIHQgKyBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xuICBvdXRbMl0gPSBhMDIgKiBiMDAgKyBhMTIgKiBiMDEgKyBhMjIgKiBiMDI7XG4gIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcbiAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xuICBvdXRbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcbiAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xuICBvdXRbOF0gPSBhMDAgKiBiMjAgKyBhMTAgKiBiMjEgKyBhMjAgKiBiMjI7XG4gIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcbiAgb3V0WzExXSA9IGEwMyAqIGIyMCArIGExMyAqIGIyMSArIGEyMyAqIGIyMjtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgdmFyIGExMCA9IGFbNF07XG4gIHZhciBhMTEgPSBhWzVdO1xuICB2YXIgYTEyID0gYVs2XTtcbiAgdmFyIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdO1xuICB2YXIgYTIxID0gYVs5XTtcbiAgdmFyIGEyMiA9IGFbMTBdO1xuICB2YXIgYTIzID0gYVsxMV07XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cblxuICBvdXRbNF0gPSBhMTAgKiBjICsgYTIwICogcztcbiAgb3V0WzVdID0gYTExICogYyArIGEyMSAqIHM7XG4gIG91dFs2XSA9IGExMiAqIGMgKyBhMjIgKiBzO1xuICBvdXRbN10gPSBhMTMgKiBjICsgYTIzICogcztcbiAgb3V0WzhdID0gYTIwICogYyAtIGExMCAqIHM7XG4gIG91dFs5XSA9IGEyMSAqIGMgLSBhMTEgKiBzO1xuICBvdXRbMTBdID0gYTIyICogYyAtIGExMiAqIHM7XG4gIG91dFsxMV0gPSBhMjMgKiBjIC0gYTEzICogcztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMDAgPSBhWzBdO1xuICB2YXIgYTAxID0gYVsxXTtcbiAgdmFyIGEwMiA9IGFbMl07XG4gIHZhciBhMDMgPSBhWzNdO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzBdID0gYTAwICogYyAtIGEyMCAqIHM7XG4gIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xuICBvdXRbMl0gPSBhMDIgKiBjIC0gYTIyICogcztcbiAgb3V0WzNdID0gYTAzICogYyAtIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xuICBvdXRbOV0gPSBhMDEgKiBzICsgYTIxICogYztcbiAgb3V0WzEwXSA9IGEwMiAqIHMgKyBhMjIgKiBjO1xuICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF07XG4gIHZhciBhMTEgPSBhWzVdO1xuICB2YXIgYTEyID0gYVs2XTtcbiAgdmFyIGExMyA9IGFbN107XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICBvdXRbOV0gPSBhWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgKyBhMTAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjICsgYTExICogcztcbiAgb3V0WzJdID0gYTAyICogYyArIGExMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgKyBhMTMgKiBzO1xuICBvdXRbNF0gPSBhMTAgKiBjIC0gYTAwICogcztcbiAgb3V0WzVdID0gYTExICogYyAtIGEwMSAqIHM7XG4gIG91dFs2XSA9IGExMiAqIGMgLSBhMDIgKiBzO1xuICBvdXRbN10gPSBhMTMgKiBjIC0gYTAzICogcztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IHZbMV07XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSB2WzJdO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCwgYXhpcyk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkLCBheGlzKSB7XG4gIHZhciB4ID0gYXhpc1swXSxcbiAgICAgIHkgPSBheGlzWzFdLFxuICAgICAgeiA9IGF4aXNbMl07XG4gIHZhciBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICB2YXIgcywgYywgdDtcblxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcbiAgcyA9IE1hdGguc2luKHJhZCk7XG4gIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB0ID0gMSAtIGM7IC8vIFBlcmZvcm0gcm90YXRpb24tc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0geCAqIHggKiB0ICsgYztcbiAgb3V0WzFdID0geSAqIHggKiB0ICsgeiAqIHM7XG4gIG91dFsyXSA9IHogKiB4ICogdCAtIHkgKiBzO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB4ICogeSAqIHQgLSB6ICogcztcbiAgb3V0WzVdID0geSAqIHkgKiB0ICsgYztcbiAgb3V0WzZdID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHggKiB6ICogdCArIHkgKiBzO1xuICBvdXRbOV0gPSB5ICogeiAqIHQgLSB4ICogcztcbiAgb3V0WzEwXSA9IHogKiB6ICogdCArIGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5yb3RhdGVYKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVhSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IHM7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IC1zO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZVkoZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gLXM7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHM7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWihkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21aUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSBjO1xuICBvdXRbMV0gPSBzO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAtcztcbiAgb3V0WzVdID0gYztcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDE7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtICh5eSArIHp6KTtcbiAgb3V0WzFdID0geHkgKyB3ejtcbiAgb3V0WzJdID0geHogLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geHkgLSB3ejtcbiAgb3V0WzVdID0gMSAtICh4eCArIHp6KTtcbiAgb3V0WzZdID0geXogKyB3eDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geHogKyB3eTtcbiAgb3V0WzldID0geXogLSB3eDtcbiAgb3V0WzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGZyb20gYSBkdWFsIHF1YXQuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgTWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7bWF0NH0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdDIob3V0LCBhKSB7XG4gIHZhciB0cmFuc2xhdGlvbiA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICB2YXIgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdLFxuICAgICAgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddO1xuICB2YXIgbWFnbml0dWRlID0gYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6ICsgYncgKiBidzsgLy9Pbmx5IHNjYWxlIGlmIGl0IG1ha2VzIHNlbnNlXG5cbiAgaWYgKG1hZ25pdHVkZSA+IDApIHtcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDIgLyBtYWduaXR1ZGU7XG4gICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyIC8gbWFnbml0dWRlO1xuICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMiAvIG1hZ25pdHVkZTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XG4gICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyO1xuICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcbiAgfVxuXG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgYSwgdHJhbnNsYXRpb24pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7UmVhZG9ubHlNYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKG91dCwgbWF0KSB7XG4gIG91dFswXSA9IG1hdFsxMl07XG4gIG91dFsxXSA9IG1hdFsxM107XG4gIG91dFsyXSA9IG1hdFsxNF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVcbiAqICB3aXRoIGEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uIHBhcmFtdGVyLCB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmVcbiAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudFxuICogQHBhcmFtICB7UmVhZG9ubHlNYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxpbmcob3V0LCBtYXQpIHtcbiAgdmFyIG0xMSA9IG1hdFswXTtcbiAgdmFyIG0xMiA9IG1hdFsxXTtcbiAgdmFyIG0xMyA9IG1hdFsyXTtcbiAgdmFyIG0yMSA9IG1hdFs0XTtcbiAgdmFyIG0yMiA9IG1hdFs1XTtcbiAgdmFyIG0yMyA9IG1hdFs2XTtcbiAgdmFyIG0zMSA9IG1hdFs4XTtcbiAgdmFyIG0zMiA9IG1hdFs5XTtcbiAgdmFyIG0zMyA9IG1hdFsxMF07XG4gIG91dFswXSA9IE1hdGguaHlwb3QobTExLCBtMTIsIG0xMyk7XG4gIG91dFsxXSA9IE1hdGguaHlwb3QobTIxLCBtMjIsIG0yMyk7XG4gIG91dFsyXSA9IE1hdGguaHlwb3QobTMxLCBtMzIsIG0zMyk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb25hbCBjb21wb25lbnRcbiAqICBvZiBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aFxuICogIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLCB0aGUgcmV0dXJuZWQgcXVhdGVybmlvbiB3aWxsIGJlIHRoZVxuICogIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSB7cXVhdH0gb3V0IFF1YXRlcm5pb24gdG8gcmVjZWl2ZSB0aGUgcm90YXRpb24gY29tcG9uZW50XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3RhdGlvbihvdXQsIG1hdCkge1xuICB2YXIgc2NhbGluZyA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICBnZXRTY2FsaW5nKHNjYWxpbmcsIG1hdCk7XG4gIHZhciBpczEgPSAxIC8gc2NhbGluZ1swXTtcbiAgdmFyIGlzMiA9IDEgLyBzY2FsaW5nWzFdO1xuICB2YXIgaXMzID0gMSAvIHNjYWxpbmdbMl07XG4gIHZhciBzbTExID0gbWF0WzBdICogaXMxO1xuICB2YXIgc20xMiA9IG1hdFsxXSAqIGlzMjtcbiAgdmFyIHNtMTMgPSBtYXRbMl0gKiBpczM7XG4gIHZhciBzbTIxID0gbWF0WzRdICogaXMxO1xuICB2YXIgc20yMiA9IG1hdFs1XSAqIGlzMjtcbiAgdmFyIHNtMjMgPSBtYXRbNl0gKiBpczM7XG4gIHZhciBzbTMxID0gbWF0WzhdICogaXMxO1xuICB2YXIgc20zMiA9IG1hdFs5XSAqIGlzMjtcbiAgdmFyIHNtMzMgPSBtYXRbMTBdICogaXMzO1xuICB2YXIgdHJhY2UgPSBzbTExICsgc20yMiArIHNtMzM7XG4gIHZhciBTID0gMDtcblxuICBpZiAodHJhY2UgPiAwKSB7XG4gICAgUyA9IE1hdGguc3FydCh0cmFjZSArIDEuMCkgKiAyO1xuICAgIG91dFszXSA9IDAuMjUgKiBTO1xuICAgIG91dFswXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgIG91dFsxXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgIG91dFsyXSA9IChzbTEyIC0gc20yMSkgLyBTO1xuICB9IGVsc2UgaWYgKHNtMTEgPiBzbTIyICYmIHNtMTEgPiBzbTMzKSB7XG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTExIC0gc20yMiAtIHNtMzMpICogMjtcbiAgICBvdXRbM10gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICBvdXRbMF0gPSAwLjI1ICogUztcbiAgICBvdXRbMV0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICBvdXRbMl0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgfSBlbHNlIGlmIChzbTIyID4gc20zMykge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20yMiAtIHNtMTEgLSBzbTMzKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgb3V0WzBdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgb3V0WzFdID0gMC4yNSAqIFM7XG4gICAgb3V0WzJdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gIH0gZWxzZSB7XG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTMzIC0gc20xMSAtIHNtMjIpICogMjtcbiAgICBvdXRbM10gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICBvdXRbMF0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgICBvdXRbMV0gPSAoc20yMyArIHNtMzIpIC8gUztcbiAgICBvdXRbMl0gPSAwLjI1ICogUztcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB4eSA9IHggKiB5MjtcbiAgdmFyIHh6ID0geCAqIHoyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB5eiA9IHkgKiB6MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICB2YXIgc3ggPSBzWzBdO1xuICB2YXIgc3kgPSBzWzFdO1xuICB2YXIgc3ogPSBzWzJdO1xuICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZSwgcm90YXRpbmcgYW5kIHNjYWxpbmcgYXJvdW5kIHRoZSBnaXZlbiBvcmlnaW5cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgb3JpZ2luKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBuZWdhdGl2ZU9yaWdpbik7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBzIFNjYWxpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gbyBUaGUgb3JpZ2luIHZlY3RvciBhcm91bmQgd2hpY2ggdG8gc2NhbGUgYW5kIHJvdGF0ZVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luKG91dCwgcSwgdiwgcywgbykge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB4eSA9IHggKiB5MjtcbiAgdmFyIHh6ID0geCAqIHoyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB5eiA9IHkgKiB6MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICB2YXIgc3ggPSBzWzBdO1xuICB2YXIgc3kgPSBzWzFdO1xuICB2YXIgc3ogPSBzWzJdO1xuICB2YXIgb3ggPSBvWzBdO1xuICB2YXIgb3kgPSBvWzFdO1xuICB2YXIgb3ogPSBvWzJdO1xuICB2YXIgb3V0MCA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xuICB2YXIgb3V0MSA9ICh4eSArIHd6KSAqIHN4O1xuICB2YXIgb3V0MiA9ICh4eiAtIHd5KSAqIHN4O1xuICB2YXIgb3V0NCA9ICh4eSAtIHd6KSAqIHN5O1xuICB2YXIgb3V0NSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICB2YXIgb3V0NiA9ICh5eiArIHd4KSAqIHN5O1xuICB2YXIgb3V0OCA9ICh4eiArIHd5KSAqIHN6O1xuICB2YXIgb3V0OSA9ICh5eiAtIHd4KSAqIHN6O1xuICB2YXIgb3V0MTAgPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgb3V0WzBdID0gb3V0MDtcbiAgb3V0WzFdID0gb3V0MTtcbiAgb3V0WzJdID0gb3V0MjtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gb3V0NDtcbiAgb3V0WzVdID0gb3V0NTtcbiAgb3V0WzZdID0gb3V0NjtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gb3V0ODtcbiAgb3V0WzldID0gb3V0OTtcbiAgb3V0WzEwXSA9IG91dDEwO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF0gKyBveCAtIChvdXQwICogb3ggKyBvdXQ0ICogb3kgKyBvdXQ4ICogb3opO1xuICBvdXRbMTNdID0gdlsxXSArIG95IC0gKG91dDEgKiBveCArIG91dDUgKiBveSArIG91dDkgKiBveik7XG4gIG91dFsxNF0gPSB2WzJdICsgb3ogLSAob3V0MiAqIG94ICsgb3V0NiAqIG95ICsgb3V0MTAgKiBveik7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgNHg0IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICB2YXIgeCA9IHFbMF0sXG4gICAgICB5ID0gcVsxXSxcbiAgICAgIHogPSBxWzJdLFxuICAgICAgdyA9IHFbM107XG4gIHZhciB4MiA9IHggKyB4O1xuICB2YXIgeTIgPSB5ICsgeTtcbiAgdmFyIHoyID0geiArIHo7XG4gIHZhciB4eCA9IHggKiB4MjtcbiAgdmFyIHl4ID0geSAqIHgyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB6eCA9IHogKiB4MjtcbiAgdmFyIHp5ID0geiAqIHkyO1xuICB2YXIgenogPSB6ICogejI7XG4gIHZhciB3eCA9IHcgKiB4MjtcbiAgdmFyIHd5ID0gdyAqIHkyO1xuICB2YXIgd3ogPSB3ICogejI7XG4gIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICBvdXRbMV0gPSB5eCArIHd6O1xuICBvdXRbMl0gPSB6eCAtIHd5O1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB5eCAtIHd6O1xuICBvdXRbNV0gPSAxIC0geHggLSB6ejtcbiAgb3V0WzZdID0genkgKyB3eDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0genggKyB3eTtcbiAgb3V0WzldID0genkgLSB3eDtcbiAgb3V0WzEwXSA9IDEgLSB4eCAtIHl5O1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIGZydXN0dW0gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcnVzdHVtKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIHJsID0gMSAvIChyaWdodCAtIGxlZnQpO1xuICB2YXIgdGIgPSAxIC8gKHRvcCAtIGJvdHRvbSk7XG4gIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IG5lYXIgKiAyICogcmw7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IG5lYXIgKiAyICogdGI7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IChyaWdodCArIGxlZnQpICogcmw7XG4gIG91dFs5XSA9ICh0b3AgKyBib3R0b20pICogdGI7XG4gIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcbiAgb3V0WzExXSA9IC0xO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSBmYXIgKiBuZWFyICogMiAqIG5mO1xuICBvdXRbMTVdID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLlxuICogVGhlIG5lYXIvZmFyIGNsaXAgcGxhbmVzIGNvcnJlc3BvbmQgdG8gYSBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlIFogcmFuZ2Ugb2YgWy0xLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR0wvT3BlbkdMJ3MgY2xpcCB2b2x1bWUuXG4gKiBQYXNzaW5nIG51bGwvdW5kZWZpbmVkL25vIHZhbHVlIGZvciBmYXIgd2lsbCBnZW5lcmF0ZSBpbmZpbml0ZSBwcm9qZWN0aW9uIG1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bSwgY2FuIGJlIG51bGwgb3IgSW5maW5pdHlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmVOTyhvdXQsIGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XG4gIHZhciBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxuICAgICAgbmY7XG4gIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGY7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTVdID0gMDtcblxuICBpZiAoZmFyICE9IG51bGwgJiYgZmFyICE9PSBJbmZpbml0eSkge1xuICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzE0XSA9IDIgKiBmYXIgKiBuZWFyICogbmY7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzEwXSA9IC0xO1xuICAgIG91dFsxNF0gPSAtMiAqIG5lYXI7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQucGVyc3BlY3RpdmVOT31cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgcGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZU5PO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCBzdWl0YWJsZSBmb3IgV2ViR1BVIHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cbiAqIFRoZSBuZWFyL2ZhciBjbGlwIHBsYW5lcyBjb3JyZXNwb25kIHRvIGEgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSBaIHJhbmdlIG9mIFswLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR1BVL1Z1bGthbi9EaXJlY3RYL01ldGFsJ3MgY2xpcCB2b2x1bWUuXG4gKiBQYXNzaW5nIG51bGwvdW5kZWZpbmVkL25vIHZhbHVlIGZvciBmYXIgd2lsbCBnZW5lcmF0ZSBpbmZpbml0ZSBwcm9qZWN0aW9uIG1hdHJpeC5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bSwgY2FuIGJlIG51bGwgb3IgSW5maW5pdHlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyc3BlY3RpdmVaTyhvdXQsIGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XG4gIHZhciBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxuICAgICAgbmY7XG4gIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGY7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTVdID0gMDtcblxuICBpZiAoZmFyICE9IG51bGwgJiYgZmFyICE9PSBJbmZpbml0eSkge1xuICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMTBdID0gZmFyICogbmY7XG4gICAgb3V0WzE0XSA9IGZhciAqIG5lYXIgKiBuZjtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMTBdID0gLTE7XG4gICAgb3V0WzE0XSA9IC1uZWFyO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gZmllbGQgb2Ygdmlldy5cbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWZ1bCBmb3IgZ2VuZXJhdGluZyBwcm9qZWN0aW9uIG1hdHJpY2VzIHRvIGJlIHVzZWRcbiAqIHdpdGggdGhlIHN0aWxsIGV4cGVyaWVtZW50YWwgV2ViVlIgQVBJLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3YgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyB2YWx1ZXM6IHVwRGVncmVlcywgZG93bkRlZ3JlZXMsIGxlZnREZWdyZWVzLCByaWdodERlZ3JlZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3KG91dCwgZm92LCBuZWFyLCBmYXIpIHtcbiAgdmFyIHVwVGFuID0gTWF0aC50YW4oZm92LnVwRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciBkb3duVGFuID0gTWF0aC50YW4oZm92LmRvd25EZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIGxlZnRUYW4gPSBNYXRoLnRhbihmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgcmlnaHRUYW4gPSBNYXRoLnRhbihmb3YucmlnaHREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIHhTY2FsZSA9IDIuMCAvIChsZWZ0VGFuICsgcmlnaHRUYW4pO1xuICB2YXIgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XG4gIG91dFswXSA9IHhTY2FsZTtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIG91dFszXSA9IDAuMDtcbiAgb3V0WzRdID0gMC4wO1xuICBvdXRbNV0gPSB5U2NhbGU7XG4gIG91dFs2XSA9IDAuMDtcbiAgb3V0WzddID0gMC4wO1xuICBvdXRbOF0gPSAtKChsZWZ0VGFuIC0gcmlnaHRUYW4pICogeFNjYWxlICogMC41KTtcbiAgb3V0WzldID0gKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjU7XG4gIG91dFsxMF0gPSBmYXIgLyAobmVhciAtIGZhcik7XG4gIG91dFsxMV0gPSAtMS4wO1xuICBvdXRbMTJdID0gMC4wO1xuICBvdXRbMTNdID0gMC4wO1xuICBvdXRbMTRdID0gZmFyICogbmVhciAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzE1XSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbLTEsIDFdLFxuICogd2hpY2ggbWF0Y2hlcyBXZWJHTC9PcGVuR0wncyBjbGlwIHZvbHVtZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gb3J0aG9OTyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcbiAgdmFyIGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSAtMiAqIGxyO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAtMiAqIGJ0O1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMiAqIG5mO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG4gIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQub3J0aG9OT31cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgb3J0aG8gPSBvcnRob05PO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSBvcnRob2dvbmFsIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cbiAqIFRoZSBuZWFyL2ZhciBjbGlwIHBsYW5lcyBjb3JyZXNwb25kIHRvIGEgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSBaIHJhbmdlIG9mIFswLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR1BVL1Z1bGthbi9EaXJlY3RYL01ldGFsJ3MgY2xpcCB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvWk8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IG5mO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG4gIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICBvdXRbMTRdID0gbmVhciAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgbG9vay1hdCBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gZXllIHBvc2l0aW9uLCBmb2NhbCBwb2ludCwgYW5kIHVwIGF4aXMuXG4gKiBJZiB5b3Ugd2FudCBhIG1hdHJpeCB0aGF0IGFjdHVhbGx5IG1ha2VzIGFuIG9iamVjdCBsb29rIGF0IGFub3RoZXIgb2JqZWN0LCB5b3Ugc2hvdWxkIHVzZSB0YXJnZXRUbyBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGNlbnRlciBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvb2tBdChvdXQsIGV5ZSwgY2VudGVyLCB1cCkge1xuICB2YXIgeDAsIHgxLCB4MiwgeTAsIHkxLCB5MiwgejAsIHoxLCB6MiwgbGVuO1xuICB2YXIgZXlleCA9IGV5ZVswXTtcbiAgdmFyIGV5ZXkgPSBleWVbMV07XG4gIHZhciBleWV6ID0gZXllWzJdO1xuICB2YXIgdXB4ID0gdXBbMF07XG4gIHZhciB1cHkgPSB1cFsxXTtcbiAgdmFyIHVweiA9IHVwWzJdO1xuICB2YXIgY2VudGVyeCA9IGNlbnRlclswXTtcbiAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XG4gIHZhciBjZW50ZXJ6ID0gY2VudGVyWzJdO1xuXG4gIGlmIChNYXRoLmFicyhleWV4IC0gY2VudGVyeCkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXkgLSBjZW50ZXJ5KSA8IGdsTWF0cml4LkVQU0lMT04gJiYgTWF0aC5hYnMoZXlleiAtIGNlbnRlcnopIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBpZGVudGl0eShvdXQpO1xuICB9XG5cbiAgejAgPSBleWV4IC0gY2VudGVyeDtcbiAgejEgPSBleWV5IC0gY2VudGVyeTtcbiAgejIgPSBleWV6IC0gY2VudGVyejtcbiAgbGVuID0gMSAvIE1hdGguaHlwb3QoejAsIHoxLCB6Mik7XG4gIHowICo9IGxlbjtcbiAgejEgKj0gbGVuO1xuICB6MiAqPSBsZW47XG4gIHgwID0gdXB5ICogejIgLSB1cHogKiB6MTtcbiAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xuICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IE1hdGguaHlwb3QoeDAsIHgxLCB4Mik7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICB4MCA9IDA7XG4gICAgeDEgPSAwO1xuICAgIHgyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuICB9XG5cbiAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcbiAgbGVuID0gTWF0aC5oeXBvdCh5MCwgeTEsIHkyKTtcblxuICBpZiAoIWxlbikge1xuICAgIHkwID0gMDtcbiAgICB5MSA9IDA7XG4gICAgeTIgPSAwO1xuICB9IGVsc2Uge1xuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeTAgKj0gbGVuO1xuICAgIHkxICo9IGxlbjtcbiAgICB5MiAqPSBsZW47XG4gIH1cblxuICBvdXRbMF0gPSB4MDtcbiAgb3V0WzFdID0geTA7XG4gIG91dFsyXSA9IHowO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB4MTtcbiAgb3V0WzVdID0geTE7XG4gIG91dFs2XSA9IHoxO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4MjtcbiAgb3V0WzldID0geTI7XG4gIG91dFsxMF0gPSB6MjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAtKHgwICogZXlleCArIHgxICogZXlleSArIHgyICogZXlleik7XG4gIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XG4gIG91dFsxNF0gPSAtKHowICogZXlleCArIHoxICogZXlleSArIHoyICogZXlleik7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXRyaXggdGhhdCBtYWtlcyBzb21ldGhpbmcgbG9vayBhdCBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xuICB2YXIgZXlleCA9IGV5ZVswXSxcbiAgICAgIGV5ZXkgPSBleWVbMV0sXG4gICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICB1cHkgPSB1cFsxXSxcbiAgICAgIHVweiA9IHVwWzJdO1xuICB2YXIgejAgPSBleWV4IC0gdGFyZ2V0WzBdLFxuICAgICAgejEgPSBleWV5IC0gdGFyZ2V0WzFdLFxuICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xuICB2YXIgbGVuID0gejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyO1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIHowICo9IGxlbjtcbiAgICB6MSAqPSBsZW47XG4gICAgejIgKj0gbGVuO1xuICB9XG5cbiAgdmFyIHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcbiAgICAgIHgxID0gdXB6ICogejAgLSB1cHggKiB6MixcbiAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHgxO1xuICBvdXRbMl0gPSB4MjtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gejEgKiB4MiAtIHoyICogeDE7XG4gIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICBvdXRbNl0gPSB6MCAqIHgxIC0gejEgKiB4MDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gejA7XG4gIG91dFs5XSA9IHoxO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gZXlleDtcbiAgb3V0WzEzXSA9IGV5ZXk7XG4gIG91dFsxNF0gPSBleWV6O1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJtYXQ0KFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiLCBcIiArIGFbNF0gKyBcIiwgXCIgKyBhWzVdICsgXCIsIFwiICsgYVs2XSArIFwiLCBcIiArIGFbN10gKyBcIiwgXCIgKyBhWzhdICsgXCIsIFwiICsgYVs5XSArIFwiLCBcIiArIGFbMTBdICsgXCIsIFwiICsgYVsxMV0gKyBcIiwgXCIgKyBhWzEyXSArIFwiLCBcIiArIGFbMTNdICsgXCIsIFwiICsgYVsxNF0gKyBcIiwgXCIgKyBhWzE1XSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9iKGEpIHtcbiAgcmV0dXJuIE1hdGguaHlwb3QoYVswXSwgYVsxXSwgYVsyXSwgYVszXSwgYVs0XSwgYVs1XSwgYVs2XSwgYVs3XSwgYVs4XSwgYVs5XSwgYVsxMF0sIGFbMTFdLCBhWzEyXSwgYVsxM10sIGFbMTRdLCBhWzE1XSk7XG59XG4vKipcbiAqIEFkZHMgdHdvIG1hdDQnc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XTtcbiAgb3V0WzldID0gYVs5XSArIGJbOV07XG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gLSBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdIC0gYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSAtIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdIC0gYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSAtIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgb3V0WzldID0gYVs5XSAqIGI7XG4gIG91dFsxMF0gPSBhWzEwXSAqIGI7XG4gIG91dFsxMV0gPSBhWzExXSAqIGI7XG4gIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gIG91dFsxM10gPSBhWzEzXSAqIGI7XG4gIG91dFsxNF0gPSBhWzE0XSAqIGI7XG4gIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIG1hdDQncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdICogc2NhbGU7XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdICogc2NhbGU7XG4gIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdICogc2NhbGU7XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldICogc2NhbGU7XG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdICogc2NhbGU7XG4gIG91dFsxMV0gPSBhWzExXSArIGJbMTFdICogc2NhbGU7XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdICogc2NhbGU7XG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdICogc2NhbGU7XG4gIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdICogc2NhbGU7XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdICYmIGFbOV0gPT09IGJbOV0gJiYgYVsxMF0gPT09IGJbMTBdICYmIGFbMTFdID09PSBiWzExXSAmJiBhWzEyXSA9PT0gYlsxMl0gJiYgYVsxM10gPT09IGJbMTNdICYmIGFbMTRdID09PSBiWzE0XSAmJiBhWzE1XSA9PT0gYlsxNV07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN107XG4gIHZhciBhOCA9IGFbOF0sXG4gICAgICBhOSA9IGFbOV0sXG4gICAgICBhMTAgPSBhWzEwXSxcbiAgICAgIGExMSA9IGFbMTFdO1xuICB2YXIgYTEyID0gYVsxMl0sXG4gICAgICBhMTMgPSBhWzEzXSxcbiAgICAgIGExNCA9IGFbMTRdLFxuICAgICAgYTE1ID0gYVsxNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIHZhciBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN107XG4gIHZhciBiOCA9IGJbOF0sXG4gICAgICBiOSA9IGJbOV0sXG4gICAgICBiMTAgPSBiWzEwXSxcbiAgICAgIGIxMSA9IGJbMTFdO1xuICB2YXIgYjEyID0gYlsxMl0sXG4gICAgICBiMTMgPSBiWzEzXSxcbiAgICAgIGIxNCA9IGJbMTRdLFxuICAgICAgYjE1ID0gYlsxNV07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKSAmJiBNYXRoLmFicyhhOSAtIGI5KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOSksIE1hdGguYWJzKGI5KSkgJiYgTWF0aC5hYnMoYTEwIC0gYjEwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTApLCBNYXRoLmFicyhiMTApKSAmJiBNYXRoLmFicyhhMTEgLSBiMTEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMSksIE1hdGguYWJzKGIxMSkpICYmIE1hdGguYWJzKGExMiAtIGIxMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEyKSwgTWF0aC5hYnMoYjEyKSkgJiYgTWF0aC5hYnMoYTEzIC0gYjEzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTMpLCBNYXRoLmFicyhiMTMpKSAmJiBNYXRoLmFicyhhMTQgLSBiMTQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNCksIE1hdGguYWJzKGIxNCkpICYmIE1hdGguYWJzKGExNSAtIGIxNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE1KSwgTWF0aC5hYnMoYjE1KSk7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0NC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0NC5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7Il0sIm5hbWVzIjpbImdsTWF0cml4IiwiY3JlYXRlIiwib3V0IiwiQVJSQVlfVFlQRSIsIkZsb2F0MzJBcnJheSIsImNsb25lIiwiYSIsImNvcHkiLCJmcm9tVmFsdWVzIiwibTAwIiwibTAxIiwibTAyIiwibTAzIiwibTEwIiwibTExIiwibTEyIiwibTEzIiwibTIwIiwibTIxIiwibTIyIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwic2V0IiwiaWRlbnRpdHkiLCJ0cmFuc3Bvc2UiLCJhMDEiLCJhMDIiLCJhMDMiLCJhMTIiLCJhMTMiLCJhMjMiLCJpbnZlcnQiLCJhMDAiLCJhMTAiLCJhMTEiLCJhMjAiLCJhMjEiLCJhMjIiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMDAiLCJiMDEiLCJiMDIiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJiMTAiLCJiMTEiLCJkZXQiLCJhZGpvaW50IiwiZGV0ZXJtaW5hbnQiLCJtdWx0aXBseSIsImIiLCJiMCIsImIxIiwiYjIiLCJiMyIsInRyYW5zbGF0ZSIsInYiLCJ4IiwieSIsInoiLCJzY2FsZSIsInJvdGF0ZSIsInJhZCIsImF4aXMiLCJsZW4iLCJNYXRoIiwiaHlwb3QiLCJzIiwiYyIsInQiLCJiMTIiLCJiMjAiLCJiMjEiLCJiMjIiLCJFUFNJTE9OIiwic2luIiwiY29zIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwiZnJvbVRyYW5zbGF0aW9uIiwiZnJvbVNjYWxpbmciLCJmcm9tUm90YXRpb24iLCJmcm9tWFJvdGF0aW9uIiwiZnJvbVlSb3RhdGlvbiIsImZyb21aUm90YXRpb24iLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvbiIsInEiLCJ3IiwieDIiLCJ5MiIsInoyIiwieHgiLCJ4eSIsInh6IiwieXkiLCJ5eiIsInp6Iiwid3giLCJ3eSIsInd6IiwiZnJvbVF1YXQyIiwidHJhbnNsYXRpb24iLCJieCIsImJ5IiwiYnoiLCJidyIsImF4IiwiYXkiLCJheiIsImF3IiwibWFnbml0dWRlIiwiZ2V0VHJhbnNsYXRpb24iLCJtYXQiLCJnZXRTY2FsaW5nIiwiZ2V0Um90YXRpb24iLCJzY2FsaW5nIiwiaXMxIiwiaXMyIiwiaXMzIiwic20xMSIsInNtMTIiLCJzbTEzIiwic20yMSIsInNtMjIiLCJzbTIzIiwic20zMSIsInNtMzIiLCJzbTMzIiwidHJhY2UiLCJTIiwic3FydCIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUiLCJzeCIsInN5Iiwic3oiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luIiwibyIsIm94Iiwib3kiLCJveiIsIm91dDAiLCJvdXQxIiwib3V0MiIsIm91dDQiLCJvdXQ1Iiwib3V0NiIsIm91dDgiLCJvdXQ5Iiwib3V0MTAiLCJmcm9tUXVhdCIsInl4IiwiengiLCJ6eSIsImZydXN0dW0iLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0b3AiLCJuZWFyIiwiZmFyIiwicmwiLCJ0YiIsIm5mIiwicGVyc3BlY3RpdmVOTyIsImZvdnkiLCJhc3BlY3QiLCJmIiwidGFuIiwiSW5maW5pdHkiLCJwZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlWk8iLCJwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyIsImZvdiIsInVwVGFuIiwidXBEZWdyZWVzIiwiUEkiLCJkb3duVGFuIiwiZG93bkRlZ3JlZXMiLCJsZWZ0VGFuIiwibGVmdERlZ3JlZXMiLCJyaWdodFRhbiIsInJpZ2h0RGVncmVlcyIsInhTY2FsZSIsInlTY2FsZSIsIm9ydGhvTk8iLCJsciIsImJ0Iiwib3J0aG8iLCJvcnRob1pPIiwibG9va0F0IiwiZXllIiwiY2VudGVyIiwidXAiLCJ4MCIsIngxIiwieTAiLCJ5MSIsInowIiwiejEiLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJhYnMiLCJ0YXJnZXRUbyIsInRhcmdldCIsInN0ciIsImZyb2IiLCJhZGQiLCJzdWJ0cmFjdCIsIm11bHRpcGx5U2NhbGFyIiwibXVsdGlwbHlTY2FsYXJBbmRBZGQiLCJleGFjdEVxdWFscyIsImVxdWFscyIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiYTE0IiwiYTE1IiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYjEzIiwiYjE0IiwiYjE1IiwibWF4IiwibXVsIiwic3ViIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gl-matrix/esm/mat4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat2: () => (/* binding */ transformMat2),\n/* harmony export */   transformMat2d: () => (/* binding */ transformMat2d),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */ /**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */ function fromValues(x, y) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */ function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1];\n    return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1];\n    return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0], y = a[1];\n    return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0], y = a[1];\n    return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */ function normalize(out, a) {\n    var x = a[0], y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0], ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */ function random(out, scale) {\n    scale = scale || 1.0;\n    var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat2(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat2d(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat3(out, a, m) {\n    var x = a[0], y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */ function transformMat4(out, a, m) {\n    var x = a[0];\n    var y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */ function rotate(out, a, b, rad) {\n    //Translate point to the origin\n    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad); //perform rotation and translate to correct position\n    out[0] = p0 * cosC - p1 * sinC + b[0];\n    out[1] = p0 * sinC + p1 * cosC + b[1];\n    return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */ function angle(a, b) {\n    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], // mag is the product of the magnitudes of a and b\n    mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), // mag &&.. short circuits if mag == 0\n    cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 2;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gl-matrix/esm/vec2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   bezier: () => (/* binding */ bezier),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   hermite: () => (/* binding */ hermite),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   transformQuat: () => (/* binding */ transformQuat),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */ /**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */ function fromValues(x, y, z) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */ function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */ function normalize(out, a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */ function cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2];\n    var bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0];\n    var ay = a[1];\n    var az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function hermite(out, a, b, c, d, t) {\n    var factorTimes2 = t * t;\n    var factor1 = factorTimes2 * (2 * t - 3) + 1;\n    var factor2 = factorTimes2 * (t - 2) + t;\n    var factor3 = factorTimes2 * (t - 1);\n    var factor4 = factorTimes2 * (3 - 2 * t);\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */ function bezier(out, a, b, c, d, t) {\n    var inverseFactor = 1 - t;\n    var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n    var factorTimes2 = t * t;\n    var factor1 = inverseFactorTimesTwo * inverseFactor;\n    var factor2 = 3 * t * inverseFactorTimesTwo;\n    var factor3 = 3 * factorTimes2 * inverseFactor;\n    var factor4 = factorTimes2 * t;\n    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */ function random(out, scale) {\n    scale = scale || 1.0;\n    var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n    var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n    var zScale = Math.sqrt(1.0 - z * z) * scale;\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */ function transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */ function transformMat3(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */ function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n    var w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2; // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateX(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[0];\n    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateY(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n    r[1] = p[1];\n    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */ function rotateZ(out, a, b, rad) {\n    var p = [], r = []; //Translate point to the origin\n    p[0] = a[0] - b[0];\n    p[1] = a[1] - b[1];\n    p[2] = a[2] - b[2]; //perform rotation\n    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n    r[2] = p[2]; //translate to correct position\n    out[0] = r[0] + b[0];\n    out[1] = r[1] + b[1];\n    out[2] = r[2] + b[2];\n    return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */ function angle(a, b) {\n    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;\n    return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 3;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            vec[2] = a[i + 2];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n            a[i + 2] = vec[2];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gl-matrix/esm/vec3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   transformQuat: () => (/* binding */ transformQuat),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */ /**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */ function create() {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 0;\n    }\n    return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */ function clone(a) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */ function fromValues(x, y, z, w) {\n    var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */ function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */ function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */ function ceil(out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */ function floor(out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function min(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */ function max(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */ function round(out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */ function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */ function scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */ function distance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    var w = b[3] - a[3];\n    return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */ function squaredDistance(a, b) {\n    var x = b[0] - a[0];\n    var y = b[1] - a[1];\n    var z = b[2] - a[2];\n    var w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */ function length(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */ function squaredLength(a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */ function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */ function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    out[3] = 1.0 / a[3];\n    return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */ function normalize(out, a) {\n    var x = a[0];\n    var y = a[1];\n    var z = a[2];\n    var w = a[3];\n    var len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */ function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */ function cross(out, u, v, w) {\n    var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];\n    var G = u[0];\n    var H = u[1];\n    var I = u[2];\n    var J = u[3];\n    out[0] = H * F - I * E + J * D;\n    out[1] = -(G * F) + I * C - J * B;\n    out[2] = G * E - H * C + J * A;\n    out[3] = -(G * D) + H * B - I * A;\n    return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */ function lerp(out, a, b, t) {\n    var ax = a[0];\n    var ay = a[1];\n    var az = a[2];\n    var aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */ function random(out, scale) {\n    scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n    // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n    // http://projecteuclid.org/euclid.aoms/1177692644;\n    var v1, v2, v3, v4;\n    var s1, s2;\n    do {\n        v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        s1 = v1 * v1 + v2 * v2;\n    }while (s1 >= 1);\n    do {\n        v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n        s2 = v3 * v3 + v4 * v4;\n    }while (s2 >= 1);\n    var d = Math.sqrt((1 - s1) / s2);\n    out[0] = scale * v1;\n    out[1] = scale * v2;\n    out[2] = scale * v3 * d;\n    out[3] = scale * v4 * d;\n    return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */ function transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */ function transformQuat(out, a, q) {\n    var x = a[0], y = a[1], z = a[2];\n    var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */ function zero(out) {\n    out[0] = 0.0;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */ function str(a) {\n    return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */ function equals(a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */ var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */ var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */ var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */ var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */ var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */ var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */ var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */ var forEach = function() {\n    var vec = create();\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if (!stride) {\n            stride = 4;\n        }\n        if (!offset) {\n            offset = 0;\n        }\n        if (count) {\n            l = Math.min(count * stride + offset, a.length);\n        } else {\n            l = a.length;\n        }\n        for(i = offset; i < l; i += stride){\n            vec[0] = a[i];\n            vec[1] = a[i + 1];\n            vec[2] = a[i + 2];\n            vec[3] = a[i + 3];\n            fn(vec, vec, arg);\n            a[i] = vec[0];\n            a[i + 1] = vec[1];\n            a[i + 2] = vec[2];\n            a[i + 3] = vec[3];\n        }\n        return a;\n    };\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gl-matrix/esm/vec4.js\n");

/***/ })

};
;